---
description: 
globs: 
alwaysApply: false
---
# Coding Conventions

## TypeScript

- Use TypeScript for all files
- Define interfaces for all data structures
- Use type inference where possible, but be explicit when needed
- Follow the project's tsconfig.json configuration

## React

- Use functional components with hooks
- Keep components small and focused on a single responsibility
- Put shared components in the components directory
- Use React Router for navigation
- Use React Hook Form for form handling

## State Management

- Use Redux Toolkit for global state
- Use RTK Query for API calls
- Organize redux code into slices
- Keep UI state in component state when possible

## Styling

- Use TailwindCSS for styling
- Follow utility-first approach
- Use consistent spacing and sizing from the design system
- Handle dark mode with Tailwind's dark mode classes

## Testing

- Write tests for all components and functions
- Use testing-library's best practices
- Test UI interactions with user-event
- Mock external dependencies
- Write end-to-end tests for critical user flows

## API

- Follow RESTful principles
- Define endpoints in OpenAPI specification
- Validate all inputs and outputs
- Use appropriate HTTP methods and status codes
- Handle errors gracefully

## Naming Conventions

- Use camelCase for variables, functions, and methods
- Use PascalCase for classes, interfaces, and React components
- Use kebab-case for file names
- Use descriptive names that indicate the purpose

## File Organization

- Group related files together
- Keep files small and focused
- Use index files to export from directories
- Follow the established project structure
