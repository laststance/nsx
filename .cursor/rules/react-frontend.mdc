---
description: 
globs: 
alwaysApply: true
---
# React Frontend

The frontend of NSX is built with React 19, Redux Toolkit, and TailwindCSS.

## Application Structure

- [App.tsx](mdc:src/App.tsx): Main application component
- [Routes.tsx](mdc:src/Routes.tsx): React Router configuration
- [global.css](mdc:src/global.css): Global styles with TailwindCSS

## State Management

Redux Toolkit is used for state management:

- [redux/store.ts](mdc:src/redux/store.ts): Redux store configuration
- Redux slice files directly in [redux](mdc:src/redux): Redux slices for different parts of the application
- [redux/API.ts](mdc:src/redux/API.ts): RTK Query API definitions

## Components

Components are organized into:

- **Page Components**: Full pages corresponding to routes in [pages](mdc:src/pages)
- **Reusable Components**: Shared UI components in [components](mdc:src/components)
- **Headless Components**: Logic-only components in [headlessComponents](mdc:src/headlessComponents)

## Styling

TailwindCSS is used for styling:

- Utility classes directly in JSX
- TailwindCSS v4 configuration via PostCSS in [postcss.config.cjs](mdc:postcss.config.cjs)
- Global styles with Tailwind directives in [global.css](mdc:src/global.css)

## Forms

Form handling is done with React Hook Form:

- Integration with Zod for validation
- Custom form components in the components directory

## Custom Hooks

Custom hooks in [hooks](mdc:src/hooks) provide reusable logic across components.
